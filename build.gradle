buildscript {
	ext {
		springfoxSwaggerVersion      = '2.9.2'
		swaggerAnnotationsVersion    = '1.5.21'
		jsonwebtokenVersion          = '0.9.1'
		rsqlQuerydslVersion          = '2.0.0.RELEASE'
	}
}

plugins {
	id 'java-library'
	id 'maven-publish'
	id 'org.springframework.boot'           version '2.1.0.RELEASE'  apply false
	id "com.ewerk.gradle.plugins.querydsl"  version "1.0.10"         apply false
	id 'com.palantir.docker'                version '0.20.1'         apply false
}

subprojects {
	apply plugin: 'java-library'
	apply plugin: 'maven-publish'
	apply plugin: 'io.spring.dependency-management'

	group = 'org.labcabrera.samples.mongo.ddd'
	version = version
	sourceCompatibility = 1.8

	repositories {
		mavenLocal()
		mavenCentral()
	}
}

/*
 * NOTA: por el plugin de querydsl hay que establecer el scope compile en las dependencias, que esta
 * deprecado y ademas obliga a tener a este nivel la de lombok por ejemplo que deberia tener solo
 * scope de compilacion para que no se incluya en el runtime. Revisar funcionamiento del plugin.
 */
project(":commons-model") {
	apply plugin: "com.ewerk.gradle.plugins.querydsl"
	dependencies {
		compile('org.springframework.boot:spring-boot-starter-validation')
		compile('org.springframework.boot:spring-boot-starter-data-mongodb')
		compile('org.springframework.boot:spring-boot-starter-security')
		compile("io.swagger:swagger-annotations:${swaggerAnnotationsVersion}")
		compile('com.fasterxml.jackson.core:jackson-databind')
		compile('org.projectlombok:lombok')
	}
	querydsl {
		querydslDefault = true
		springDataMongo = true
	}
}

project(":commons-data") {
	dependencies {
		api(project(':commons-model')) { transitive = false }
		api('org.springframework.boot:spring-boot-starter-data-mongodb')
		api('com.querydsl:querydsl-mongodb')
		compileOnly('org.projectlombok:lombok')
	}
}

project(":commons-service") {
	dependencies {
		api(project(':commons-data'))
		api('org.springframework.boot:spring-boot-starter-security')
		compileOnly('org.projectlombok:lombok')
	}
}

project(":commons-api") {
	dependencies {
		api(project(':commons-service'))
		api('org.springframework.boot:spring-boot-starter-hateoas')
		api('org.springframework.boot:spring-boot-starter-web')
		api("com.github.vineey:rsql-querydsl-all:${rsqlQuerydslVersion}")
		api("io.springfox:springfox-swagger2:${springfoxSwaggerVersion}")
		api("io.springfox:springfox-swagger-ui:${springfoxSwaggerVersion}")
		compileOnly('org.projectlombok:lombok')
	}
}

project(":commons-security") {
	dependencies {
		api(project(':commons-data'))
		api('org.springframework.boot:spring-boot-starter-web')
		api('org.springframework.boot:spring-boot-starter-security')
		api("io.jsonwebtoken:jjwt:${jsonwebtokenVersion}")
		compileOnly('org.projectlombok:lombok')
	}
}

project(":app-model") {
	apply plugin: "com.ewerk.gradle.plugins.querydsl"
	dependencies {
		compile(project(':commons-model')) { transitive = false }
		compile('com.querydsl:querydsl-mongodb')
		compile('org.springframework.boot:spring-boot-starter-data-mongodb')
		compile('org.springframework.boot:spring-boot-starter-security')
		compile('org.projectlombok:lombok')
		testCompile(project(':commons-data'))
		testCompile(project(':commons-service'))
		testCompile('org.springframework.boot:spring-boot-starter-test')
	}
	querydsl {
		querydslDefault = true
		springDataMongo = true
	}
}

project(":app-api") {
	apply plugin: 'org.springframework.boot'
	apply plugin: 'com.palantir.docker'
	dependencies {
		implementation(project(':commons-api'))
		implementation(project(':commons-security'))
		implementation(project(':app-model'))
		implementation('org.springframework.boot:spring-boot-starter-actuator')
		api('org.projectlombok:lombok')
	}
}

configure(subprojects.findAll { it.name != "app-api" }) {
	dependencyManagement {
		imports {
			mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
		}
	}
	task sourcesJar(type: Jar) {
		from sourceSets.main.allJava
		classifier = 'sources'
	}
	publishing {
		publications {
			mavenJava(MavenPublication) {
				groupId = group
				artifactId = project.name
				version = version
				from components.java
				artifact sourcesJar
			}
		}
	}
}